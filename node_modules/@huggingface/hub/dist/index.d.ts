type RepoType = "space" | "dataset" | "model";

interface RepoId {
	name: string;
	type: RepoType;
}

type RepoFullName = string | `spaces/${string}` | `datasets/${string}`;

type RepoDesignation = RepoId | RepoFullName;

/** Actually `hf_${string}`, but for convenience, using the string type */
type AccessToken = string;

interface Credentials {
	accessToken: AccessToken;
}

type SpaceHardwareFlavor =
	| "cpu-basic"
	| "cpu-upgrade"
	| "t4-small"
	| "t4-medium"
	| "a10g-small"
	| "a10g-large"
	| "a100-large";

type SpaceSdk = "streamlit" | "gradio" | "docker" | "static";

type SpaceStage =
	| "NO_APP_FILE"
	| "CONFIG_ERROR"
	| "BUILDING"
	| "BUILD_ERROR"
	| "RUNNING"
	| "RUNNING_BUILDING"
	| "RUNTIME_ERROR"
	| "DELETING"
	| "PAUSED"
	| "SLEEPING";

type AccessTokenRole = "admin" | "write" | "contributor" | "read";

type AuthType = "access_token" | "app_token" | "app_token_as_user";

type Task =
	| "text-classification"
	| "token-classification"
	| "table-question-answering"
	| "question-answering"
	| "zero-shot-classification"
	| "translation"
	| "summarization"
	| "conversational"
	| "feature-extraction"
	| "text-generation"
	| "text2text-generation"
	| "fill-mask"
	| "sentence-similarity"
	| "text-to-speech"
	| "automatic-speech-recognition"
	| "audio-to-audio"
	| "audio-classification"
	| "voice-activity-detection"
	| "depth-estimation"
	| "image-classification"
	| "object-detection"
	| "image-segmentation"
	| "text-to-image"
	| "image-to-text"
	| "image-to-image"
	| "unconditional-image-generation"
	| "video-classification"
	| "reinforcement-learning"
	| "robotics"
	| "tabular-classification"
	| "tabular-regression"
	| "tabular-to-text"
	| "table-to-text"
	| "multiple-choice"
	| "text-retrieval"
	| "time-series-forecasting"
	| "visual-question-answering"
	| "document-question-answering"
	| "zero-shot-image-classification"
	| "graph-ml"
	| "other";

interface SpaceRuntime {
	stage: SpaceStage;
	sdk?: SpaceSdk;
	sdkVersion?: string;
	errorMessage?: string;
	hardware?: {
		current: SpaceHardwareFlavor | null;
		currentPrettyName?: string;
		requested: SpaceHardwareFlavor | null;
		requestedPrettyName?: string;
	};
	/** when calling /spaces, those props are only fetched if ?full=true */
	resources?: SpaceResourceConfig;
	/** in seconds */
	gcTimeout?: number | null;
}

interface SpaceResourceRequirement {
	cpu?: string;
	memory?: string;
	gpu?: string;
	gpuModel?: string;
	ephemeral?: string;
}

interface SpaceResourceConfig {
	requests: SpaceResourceRequirement;
	limits: SpaceResourceRequirement;
	replicas?: number;
	throttled?: boolean;
	is_custom?: boolean;
}

interface CommitDeletedEntry {
    operation: "delete";
    path: string;
}
type ContentSource = Blob | URL;
interface CommitFile {
    operation: "addOrUpdate";
    path: string;
    content: ContentSource;
}
type CommitOperation = CommitDeletedEntry | CommitFile;
interface CommitParams {
    title: string;
    description?: string;
    repo: RepoDesignation;
    operations: CommitOperation[];
    credentials: Credentials;
    /** @default "main" */
    branch?: string;
    /**
     * Parent commit. Optional
     *
     * - When opening a PR: will use parentCommit as the parent commit
     * - When committing on a branch: Will make sure that there were no intermediate commits
     */
    parentCommit?: string;
    isPullRequest?: boolean;
    hubUrl?: string;
}
interface CommitOutput {
    pullRequestUrl?: string;
    commit: {
        oid: string;
        url: string;
    };
    hookOutput: string;
}
declare function commit(params: CommitParams): Promise<CommitOutput>;

declare function createRepo(params: {
    repo: RepoDesignation;
    credentials: Credentials;
    private?: boolean;
    license?: string;
    /**
     * Only a few lightweight files are supported at repo creation
     */
    files?: Array<{
        content: ArrayBuffer | Blob;
        path: string;
    }>;
    /** @required for when {@link repo.type} === "space" */
    sdk?: SpaceSdk;
    hubUrl?: string;
}): Promise<{
    repoUrl: string;
}>;

declare function deleteRepo(params: {
    repo: RepoDesignation;
    credentials: Credentials;
    hubUrl?: string;
}): Promise<void>;

declare function deleteFile(params: {
    credentials: Credentials;
    repo: CommitParams["repo"];
    path: string;
    commitTitle?: CommitParams["title"];
    commitDescription?: CommitParams["description"];
    hubUrl?: CommitParams["hubUrl"];
    branch?: CommitParams["branch"];
    isPullRequest?: CommitParams["isPullRequest"];
    parentCommit?: CommitParams["parentCommit"];
}): Promise<CommitOutput>;

declare function deleteFiles(params: {
    credentials: Credentials;
    repo: CommitParams["repo"];
    paths: string[];
    commitTitle?: CommitParams["title"];
    commitDescription?: CommitParams["description"];
    hubUrl?: CommitParams["hubUrl"];
    branch?: CommitParams["branch"];
    isPullRequest?: CommitParams["isPullRequest"];
    parentCommit?: CommitParams["parentCommit"];
}): Promise<CommitOutput>;

/**
 * @returns null when the file doesn't exist
 */
declare function downloadFile(params: {
    repo: RepoDesignation;
    path: string;
    /**
     * If true, will download the raw git file.
     *
     * For example, when calling on a file stored with Git LFS, the pointer file will be downloaded instead.
     */
    raw?: boolean;
    revision?: string;
    credentials?: Credentials;
    hubUrl?: string;
}): Promise<Response | null>;

interface FileDownloadInfoOutput {
    size: number;
    etag: string;
    /**
     * In case of LFS file, link to download directly from cloud provider
     */
    downloadLink: string | null;
}
/**
 * @returns null when the file doesn't exist
 */
declare function fileDownloadInfo(params: {
    repo: RepoDesignation;
    path: string;
    revision?: string;
    credentials?: Credentials;
    hubUrl?: string;
    /**
     * To get the raw pointer file behind a LFS file
     */
    raw?: boolean;
    /**
     * To avoid the content-disposition header in the `downloadLink` for LFS files
     *
     * So that on browsers you can use the URL in an iframe for example
     */
    noContentDisposition?: boolean;
}): Promise<FileDownloadInfoOutput | null>;

interface DatasetEntry {
    id: string;
    name: string;
    private: boolean;
    downloads: number;
    gated: false | "auto" | "manual";
    likes: number;
    updatedAt: Date;
}
declare function listDatasets(params?: {
    search?: {
        owner?: string;
    };
    credentials?: Credentials;
    hubUrl?: string;
}): AsyncGenerator<DatasetEntry>;

interface ModelEntry {
    id: string;
    name: string;
    private: boolean;
    gated: false | "auto" | "manual";
    task?: Task;
    likes: number;
    downloads: number;
    updatedAt: Date;
}
declare function listModels(params?: {
    search?: {
        owner?: string;
        task?: Task;
    };
    credentials?: Credentials;
    hubUrl?: string;
}): AsyncGenerator<ModelEntry>;

interface SpaceEntry {
    id: string;
    name: string;
    sdk?: SpaceSdk;
    likes: number;
    private: boolean;
    updatedAt: Date;
}
declare function listSpaces(params?: {
    search?: {
        owner?: string;
    };
    credentials?: Credentials;
    hubUrl?: string;
}): AsyncGenerator<SpaceEntry>;

interface ListFileEntry {
    type: "file" | "directory" | "unknown";
    size: number;
    path: string;
    oid: string;
    lfs?: {
        oid: string;
        size: number;
        /** Size of the raw pointer file, 100~200 bytes */
        pointerSize: number;
    };
    /**
     * Only fetched if `expand` is set to `true` in the `listFiles` call.
     */
    lastCommit?: {
        date: string;
        id: string;
        title: string;
    };
    /**
     * Only fetched if `expand` is set to `true` in the `listFiles` call.
     */
    security?: unknown;
}
/**
 * List files in a folder. To list ALL files in the directory, call it
 * with {@link params.recursive} set to `true`.
 */
declare function listFiles(params: {
    repo: RepoDesignation;
    /**
     * Do we want to list files in subdirectories?
     */
    recursive?: boolean;
    /**
     * Eg 'data' for listing all files in the 'data' folder. Leave it empty to list all
     * files in the repo.
     */
    path?: string;
    /**
     * Fetch `lastCommit` and `securityStatus` for each file.
     */
    expand?: boolean;
    revision?: string;
    credentials?: Credentials;
    hubUrl?: string;
}): AsyncGenerator<ListFileEntry>;

declare function uploadFile(params: {
    credentials: Credentials;
    repo: CommitParams["repo"];
    file: URL | File | {
        path: string;
        content: ContentSource;
    };
    commitTitle?: CommitParams["title"];
    commitDescription?: CommitParams["description"];
    hubUrl?: CommitParams["hubUrl"];
    branch?: CommitParams["branch"];
    isPullRequest?: CommitParams["isPullRequest"];
    parentCommit?: CommitParams["parentCommit"];
}): Promise<CommitOutput>;

declare function uploadFiles(params: {
    credentials: Credentials;
    repo: CommitParams["repo"];
    files: Array<URL | File | {
        path: string;
        content: ContentSource;
    }>;
    commitTitle?: CommitParams["title"];
    commitDescription?: CommitParams["description"];
    hubUrl?: CommitParams["hubUrl"];
    branch?: CommitParams["branch"];
    isPullRequest?: CommitParams["isPullRequest"];
    parentCommit?: CommitParams["parentCommit"];
}): Promise<CommitOutput>;

interface WhoAmIUser {
    /** Unique ID persistent across renames */
    id: string;
    type: "user";
    email: string;
    emailVerified: boolean;
    isPro: boolean;
    orgs: WhoAmIOrg[];
    name: string;
    fullname: string;
    canPay: boolean;
    /**
     * @deprecated
     */
    plan?: unknown;
    avatarUrl: string;
    /**
     * Unix timestamp in seconds
     */
    periodEnd: number | null;
}
interface WhoAmIOrg {
    /** Unique ID persistent across renames */
    id: string;
    type: "org";
    name: string;
    fullname: string;
    email: string | null;
    canPay: boolean;
    /**
     * @deprecated
     */
    plan?: unknown;
    avatarUrl: string;
    /**
     * Unix timestamp in seconds
     */
    periodEnd: number | null;
}
interface WhoAmIApp {
    id: string;
    type: "app";
    name: string;
    scope?: {
        entities: string[];
        role: "admin" | "write" | "contributor" | "read";
    };
}
type WhoAmI = WhoAmIApp | WhoAmIOrg | WhoAmIUser;
interface AuthInfo {
    type: AuthType;
    accessToken?: {
        displayName: string;
        expiration?: Date;
        role: AccessTokenRole;
    };
}
declare function whoAmI(params: {
    credentials: Credentials;
    hubUrl?: string;
}): Promise<WhoAmI & {
    auth: AuthInfo;
}>;

// From https://github.com/sindresorhus/type-fest

// We want to avoid generating .d.ts files and to avoid a peer dependency on type-fest,
// so we copy the relevant types here.

// MIT License
// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

/**
Matches a JSON object.

This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. Don't use this as a direct return type as the user would have to double-cast it: `jsonObject as unknown as CustomResponse`. Instead, you could extend your CustomResponse type from it to ensure your type only uses JSON-compatible types: `interface CustomResponse extends JsonObject { … }`.

@category JSON
*/
type JsonObject = { [Key in string]: JsonValue } & { [Key in string]?: JsonValue | undefined };

/**
Matches a JSON array.

@category JSON
*/
type JsonArray = JsonValue[] | readonly JsonValue[];

/**
Matches any valid JSON primitive value.

@category JSON
*/
type JsonPrimitive = string | number | boolean | null;

/**
Matches any valid JSON value.

@see `Jsonify` if you need to transform a type to one that is assignable to `JsonValue`.

@category JSON
*/
type JsonValue = JsonPrimitive | JsonObject | JsonArray;

/**
 * Error thrown when an API call to the Hugging Face Hub fails.
 */
declare class HubApiError extends Error {
    statusCode: number;
    url: string;
    requestId?: string;
    data?: JsonObject;
    constructor(url: string, statusCode: number, requestId?: string, message?: string);
}
declare class InvalidApiResponseFormatError extends Error {
}

export { AccessToken, AccessTokenRole, AuthInfo, AuthType, CommitDeletedEntry, CommitFile, CommitOperation, CommitOutput, CommitParams, ContentSource, Credentials, DatasetEntry, FileDownloadInfoOutput, HubApiError, InvalidApiResponseFormatError, ListFileEntry, ModelEntry, RepoDesignation, RepoFullName, RepoId, RepoType, SpaceEntry, SpaceHardwareFlavor, SpaceResourceConfig, SpaceResourceRequirement, SpaceRuntime, SpaceSdk, SpaceStage, Task, WhoAmI, WhoAmIApp, WhoAmIOrg, WhoAmIUser, commit, createRepo, deleteFile, deleteFiles, deleteRepo, downloadFile, fileDownloadInfo, listDatasets, listFiles, listModels, listSpaces, uploadFile, uploadFiles, whoAmI };
