import t from"isomorphic-unfetch";function r(){return r=Object.assign?Object.assign.bind():function(t){for(var r=1;r<arguments.length;r++){var a=arguments[r];for(var e in a)Object.prototype.hasOwnProperty.call(a,e)&&(t[e]=a[e])}return t},r.apply(this,arguments)}const a=["model"];class e{constructor(t,r={}){this.apiKey=void 0,this.defaultOptions=void 0,this.apiKey=t,this.defaultOptions=r}async fillMask(t,r){return this.request(t,r)}async summarization(t,r){var a;return null==(a=await this.request(t,r))?void 0:a[0]}async questionAnswer(t,r){return await this.request(t,r)}async tableQuestionAnswer(t,r){return await this.request(t,r)}async textClassification(t,r){var a;return null==(a=await this.request(t,r))?void 0:a[0]}async textGeneration(t,r){var a;return null==(a=await this.request(t,r))?void 0:a[0]}async tokenClassification(t,r){return e.toArray(await this.request(t,r))}async translation(t,r){var a;return null==(a=await this.request(t,r))?void 0:a[0]}async zeroShotClassification(t,r){return e.toArray(await this.request(t,r))}async conversational(t,r){return await this.request(t,r)}async featureExtraction(t,r){return await this.request(t,r)}async automaticSpeechRecognition(t,a){return await this.request(t,r({},a,{binary:!0}))}async audioClassification(t,a){return await this.request(t,r({},a,{binary:!0}))}async imageClassification(t,a){return await this.request(t,r({},a,{binary:!0}))}async objectDetection(t,a){return await this.request(t,r({},a,{binary:!0}))}async imageSegmentation(t,a){return await this.request(t,r({},a,{binary:!0}))}async request(e,i){const n=r({},this.defaultOptions,i),{model:s}=e,o=function(t,r){if(null==t)return{};var a,e,i={},n=Object.keys(t);for(e=0;e<n.length;e++)r.indexOf(a=n[e])>=0||(i[a]=t[a]);return i}(e,a),u=await t(`https://api-inference.huggingface.co/models/${s}`,{headers:{Authorization:`Bearer ${this.apiKey}`},method:"POST",body:null!=i&&i.binary?e.data:JSON.stringify(r({},o,{options:n}))});if(!1!==n.retry_on_error&&503===u.status&&!n.wait_for_model)return this.request(e,r({},n,{wait_for_model:!0}));const c=await u.json();if(c.error)throw new Error(c.error);return c}static toArray(t){return Array.isArray(t)?t:[t]}}export{e as HuggingFace,e as default};
//# sourceMappingURL=index.modern.js.map
