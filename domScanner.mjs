import puppeteer from 'puppeteer';
import createDOMPurify from 'dompurify';
import { JSDOM } from 'jsdom';

const domPurify = createDOMPurify(new JSDOM().window);
const linkRegex = /https?:\/\/[^\s"']*|www\.[^\s"']*|(?<!mailto:)[^\s"']+/gi;

async function scanDOM(url, depth = 0) {
  if (depth >= 5) {
    return null;
  }

  // launch Puppeteer and create a new page
  const browser = await puppeteer.launch({
    headless: "new"
  });
  const page = await browser.newPage();

  // navigate to the URL and wait until page has loaded completely
  await page.goto(url, { waitUntil: "networkidle2" });

  // extract HTML content from the page
  const html = await page.content();

  // sanitize the HTML content to remove any potential malicious code
  const cleanHtml = domPurify.sanitize(html);

  // calculate the difference between the original and sanitized HTML content
  const difference = getDifference(html, cleanHtml);

  // get a list of all subpage URLs containing <input> tags
  const inputTagRegex = /<input[^>]*>/gi;
  const subpageUrls = Array.from(cleanHtml.matchAll(linkRegex))
    .map(match => match[0])
    .filter(subpageUrl => inputTagRegex.test(subpageUrl));

  // close the Puppeteer browser instance
  await browser.close();

  // recursively scan all subpages
  const subpageResults = await Promise.all(
    subpageUrls.map(subpageUrl => scanDOM(subpageUrl, depth + 1))
  );

  // return an object containing sanitized HTML content, difference, and subpages
  return { url, sanitizedHtml: cleanHtml, difference, subpages: subpageResults };
}

function getDifference(originalHtml, sanitizedHtml) {
  // split the original and sanitized HTML into tokens using regular expressions
  const originalTokens = originalHtml.split(/(<[^>]*>)/g).filter(Boolean);
  const sanitizedTokens = sanitizedHtml.split(/(<[^>]*>)/g).filter(Boolean);

  // find the difference between the original and sanitized HTML by comparing each token
  const difference = [];

  for (let i = 0; i < originalTokens.length; i++) {
    if (originalTokens[i] !== sanitizedTokens[i]) {
      difference.push(originalTokens[i]);
    }
  }

  // join the difference tokens into a string and return it
  return difference.join("");
}

export default scanDOM;
