import express from 'express';
import fetch from 'node-fetch';
import path from 'path';
import scanDOM from './domScanner.mjs';
import analyzeResults from './analyzeResults.js';

const app = express();
const port = process.env.PORT || 3000;

// Middleware to parse JSON request bodies
app.use(express.json());

app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
  next();
});

app.get('/', (req, res) => {
  res.sendFile('public/index.html', { root: __dirname });
});

app.get('/public/client.js', (req, res) => {
  res.setHeader('Content-Type', 'application/javascript');
  res.sendFile(path.join(__dirname, 'public', 'client.js'));
});

app.use(express.static('public'));

// Scan route handler
app.post('/scan', async (req, res) => {
  console.log(req.body);
  const { url } = req.body;

  // Get the sanitized HTML from the webpage using scanDOM
  const sanitizedHtml = await scanDOM(url);

  const sqlmapApiUrl = 'http://127.0.0.1:8775';

  // Create a new task
  const newTaskResponse = await fetch(`${sqlmapApiUrl}/task/new`, { method: 'GET' });
  const newTaskJson = await newTaskResponse.json();
  const taskId = newTaskJson.taskid;

  // Set the scan options
  const options = {
    url,
    level: 2,
    risk: 1,
    forms: true,
    crawl: 2
  };

  // Start the scan
  const startScanResponse = await fetch(`${sqlmapApiUrl}/scan/${taskId}/start`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(options)
  });

  if (!startScanResponse.ok) {
    console.error(`Error starting the scan: ${await startScanResponse.text()}`);
    res.status(500).json({ error: 'Error starting the scan' });
    return;
  }

  // Poll for scan status until it's finished
  let scanStatus;
  do {
    await new Promise(resolve => setTimeout(resolve, 15000)); // Wait 5 seconds between status checks
    const statusResponse = await fetch(`${sqlmapApiUrl}/scan/${taskId}/status`);
    const statusJson = await statusResponse.json();
    scanStatus = statusJson.status;
  } while (scanStatus !== 'terminated');

  // Retrieve the scan results
  const resultsResponse = await fetch(`${sqlmapApiUrl}/scan/${taskId}/data`);
  const resultsJson = await resultsResponse.json();

  // Combine the sanitized HTML and SQLMap results into a single object or array
  const combinedResults = {
    sanitizedHtml,
    sqlmapResults: resultsJson
  };

  // Send the combined results back to the client
  res.json(combinedResults);
});



// Results route handler
app.get('/results', (req, res) => {
  const { data } = req.query;
  const results = JSON.parse(decodeURIComponent(data));
  res.send(`<h1>Scan Results for ${results.url}</h1><pre>${JSON.stringify(results, null, 2)}</pre>`);
});

app.post('/analyze', async (req, res) => {
  const result = await analyzeResults(req, res);
  res.json(result);
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
